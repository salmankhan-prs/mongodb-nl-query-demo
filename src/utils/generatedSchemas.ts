// Auto-generated MongoDB collection schemas from Mongoose models
// Generated at: 2025-09-05T10:29:29.626Z
// Total collections: 3
// Generation mode: COMPLETE - All fields, enums, and relationships preserved
// Source: Dynamic introspection of Mongoose models
// 
// ⚠️  DO NOT EDIT MANUALLY - This file is automatically generated
// To regenerate: Run 'pnpm generate:schemas'

import type { ECollectionNames } from '../types';

/**
 * Schema Format Guide (from ai-interview-be approach):
 * - (required) = Field is required
 * - (unique) = Field must be unique
 * - (indexed) = Field is indexed for performance
 * - -> CollectionName = Reference to another collection
 * - [value1|value2|...] = ALL possible enum values
 * - {min:X,max:Y} = Numeric or length constraints
 * - Array<Type> = Array of specified type
 * - Object<{...}> = Nested object with all properties listed
 */

// 🎯 AGENT-Optimized Collection Schemas with COMPLETE information
export const JSON_SCHEMA: Record<ECollectionNames, Record<string, string>> = {
  "users": {
    "name": "String(required)",
    "email": "String(required,unique)",
    "age": "Number(required) {min:13,max:120}",
    "city": "String(required)",
    "country": "String(required)",
    "joinedAt": "Date(has-default)",
    "preferences.categories": "Array<String>",
    "preferences.priceRange.min": "Number(has-default)",
    "preferences.priceRange.max": "Number(has-default)",
    "isActive": "Boolean(has-default)",
    "totalOrders": "Number(has-default)",
    "totalSpent": "Number(has-default)",
    "membershipLevel": "String(has-default) [bronze|silver|gold|platinum]",
    "_id": "ObjectId",
    "createdAt": "Date",
    "updatedAt": "Date"
  },
  "products": {
    "name": "String(required)",
    "description": "String(required)",
    "category": "String(required)",
    "subcategory": "String(required)",
    "price": "Number(required) {min:0}",
    "originalPrice": "Number(required) {min:0}",
    "discount": "Number(has-default) {min:0,max:100}",
    "brand": "String(required)",
    "inStock": "Boolean(has-default)",
    "stockQuantity": "Number(has-default) {min:0}",
    "ratings.average": "Number(has-default) {min:0,max:5}",
    "ratings.count": "Number(has-default) {min:0}",
    "features": "Array<String>",
    "tags": "Array<String>",
    "specifications": "Mixed(has-default)",
    "images": "Array<String>",
    "isActive": "Boolean(has-default)",
    "salesCount": "Number(has-default) {min:0}",
    "_id": "ObjectId",
    "createdAt": "Date",
    "updatedAt": "Date"
  },
  "orders": {
    "user": "ObjectId(required) -> users",
    "orderNumber": "String(required,unique)",
    "items": "Array<Mixed>",
    "totalAmount": "Number(required) {min:0}",
    "discountAmount": "Number(has-default) {min:0}",
    "finalAmount": "Number(required) {min:0}",
    "status": "String(has-default) [pending|confirmed|processing|shipped|delivered|cancelled|refunded]",
    "paymentMethod": "String(required) [credit_card|debit_card|paypal|bank_transfer|cash_on_delivery]",
    "paymentStatus": "String(has-default) [pending|completed|failed|refunded]",
    "shippingAddress.street": "String(required)",
    "shippingAddress.city": "String(required)",
    "shippingAddress.state": "String(required)",
    "shippingAddress.country": "String(required)",
    "shippingAddress.zipCode": "String(required)",
    "estimatedDelivery": "Date(required)",
    "actualDelivery": "Date",
    "customerNotes": "String",
    "adminNotes": "String",
    "_id": "ObjectId",
    "createdAt": "Date",
    "updatedAt": "Date"
  }
};

// 🔗 Complete Collection Relationships
export const COLLECTION_RELATIONSHIPS: Partial<Record<ECollectionNames, Array<{
  field: string;
  targetCollection: any;
  targetModel: string;
  type: 'reference' | 'array-reference' | 'nested-reference';
  required: boolean;
}>>> = {
  "orders": [
    {
      "field": "user",
      "targetCollection": "users",
      "targetModel": "User",
      "type": "reference",
      "required": true
    }
  ]
};

// 📈 Schema Metadata
export const SCHEMA_METADATA = {
  generatedAt: '2025-09-05T10:29:29.627Z',
  totalCollections: 3,
  totalFields: 58,
  totalRelationships: 1,
  generatedFrom: 'Mongoose Models (E-commerce Demo)',
  format: 'COMPLETE - No truncation',
  sourceEnum: 'ECollectionNames',
  completeness: {
    enumValues: 'ALL values included',
    nestedObjects: 'ALL properties included', 
    relationships: 'ALL references mapped',
    constraints: 'ALL validations included'
  }
};

// Helper types for RE+ACT Agent
export type CollectionSchema = typeof JSON_SCHEMA;
export type CollectionName = keyof CollectionSchema;
export type SchemaRelationships = typeof COLLECTION_RELATIONSHIPS;

// Verify all enum values have schemas
const _schemaCompleteness: Record<ECollectionNames, any> = JSON_SCHEMA;
